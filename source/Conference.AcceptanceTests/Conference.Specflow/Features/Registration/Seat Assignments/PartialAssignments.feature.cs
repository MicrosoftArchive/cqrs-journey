// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Conference.Specflow.Features.Registration.SeatAssignments
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegistrantWorkflowForPartiallyAssigningSomeOfTheRegisteredOrderItemsFeature : Xunit.IUseFixture<RegistrantWorkflowForPartiallyAssigningSomeOfTheRegisteredOrderItemsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PartialAssignments.feature"
#line hidden
        
        public RegistrantWorkflowForPartiallyAssigningSomeOfTheRegisteredOrderItemsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Registrant workflow for partially assigning some of the registered Order Items", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 16
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address",
                        "Seat type"});
            table1.AddRow(new string[] {
                        "Gregory",
                        "Weber",
                        "gregoryweber@contoso.com",
                        "General admission"});
            table1.AddRow(new string[] {
                        "Gregory",
                        "Weber",
                        "gregoryweber@contoso.com",
                        "Additional cocktail party"});
#line 17
 testRunner.Given("the individual purchased Seats", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address",
                        "Seat type"});
            table2.AddRow(new string[] {
                        "William",
                        "Weber",
                        "William@Weber.com",
                        "General admission"});
            table2.AddRow(new string[] {
                        "Gregory",
                        "Doe",
                        "GregoryDoe@live.com",
                        "General admission"});
            table2.AddRow(new string[] {
                        "Oliver",
                        "Weber",
                        "Oliver@Weber.com",
                        "CQRS Workshop"});
            table2.AddRow(new string[] {
                        "Tim",
                        "Martin",
                        "Tim@Martin.com",
                        "CQRS Workshop"});
            table2.AddRow(new string[] {
                        "Mani",
                        "Kris",
                        "Mani@Kris.com",
                        "Additional cocktail party"});
            table2.AddRow(new string[] {
                        "Jim",
                        "Gregory",
                        "Jim@Gregory.com",
                        "Additional cocktail party"});
#line 21
 testRunner.And("the group purchased Seats", ((string)(null)), table2);
#line hidden
        }
        
        public virtual void SetFixture(RegistrantWorkflowForPartiallyAssigningSomeOfTheRegisteredOrderItemsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrant workflow for partially assigning some of the registered Order Items")]
        [Xunit.TraitAttribute("Description", "Allocate all purchased Seats for an individual")]
        public virtual void AllocateAllPurchasedSeatsForAnIndividual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Allocate all purchased Seats for an individual", new string[] {
                        "Ignore"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 34
testRunner.Given("the ConfirmSuccessfulRegistration for the selected Order Items");
#line 35
testRunner.And("the Order Access code is 6789");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address",
                        "Seat type"});
            table3.AddRow(new string[] {
                        "Gregory",
                        "Weber",
                        "gregoryweber@contoso.com",
                        "General admission"});
            table3.AddRow(new string[] {
                        "Gregory",
                        "Weber",
                        "gregoryweber@contoso.com",
                        "Additional cocktail party"});
#line 36
testRunner.And("the Registratnt assign the infividual purchased Seats to attendees as following", ((string)(null)), table3);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address",
                        "Seat type"});
            table4.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "Additional cocktail party"});
#line 40
testRunner.And("leave unassigned these individual purchased seats", ((string)(null)), table4);
#line 43
testRunner.Then("the Registrant should get a Seat assignment confirmation");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Access code",
                        "email address",
                        "Seat type"});
            table5.AddRow(new string[] {
                        "6789-1",
                        "gregoryweber@contoso.com",
                        "General admission"});
#line 44
testRunner.And("the Attendees should get an email informing about the conference and the Seat Typ" +
                    "e with Seat Access Code", ((string)(null)), table5);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrant workflow for partially assigning some of the registered Order Items")]
        [Xunit.TraitAttribute("Description", "Allocate some purchased Seats for a group")]
        public virtual void AllocateSomePurchasedSeatsForAGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Allocate some purchased Seats for a group", new string[] {
                        "Ignore"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 16
this.FeatureBackground();
#line 52
testRunner.Given("the ConfirmSuccessfulRegistration");
#line 53
testRunner.And("the order access code is 6789");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address",
                        "Seat type"});
            table6.AddRow(new string[] {
                        "William",
                        "Weber",
                        "William@Weber.com",
                        "General admission"});
            table6.AddRow(new string[] {
                        "Oliver",
                        "Weber",
                        "Oliver@Weber.com",
                        "CQRS Workshop"});
            table6.AddRow(new string[] {
                        "Tim",
                        "Martin",
                        "Tim@Martin.com",
                        "CQRS Workshop"});
            table6.AddRow(new string[] {
                        "Mani",
                        "Kris",
                        "Mani@Kris.com",
                        "Additional cocktail party"});
#line 54
testRunner.And("the Registrant assign the group purchased Seats to attendees as following", ((string)(null)), table6);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address",
                        "Seat type"});
            table7.AddRow(new string[] {
                        "Gregory",
                        "Doe",
                        "GregoryDoe@live.com",
                        "General admission"});
            table7.AddRow(new string[] {
                        "Jim",
                        "Gregory",
                        "Jim@Gregory.com",
                        "Additional cocktail party"});
#line 60
testRunner.And("leave unassigned these individual purchased seats", ((string)(null)), table7);
#line 64
testRunner.Then("the Registrant should get a Seat Assignment confirmation");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Access code",
                        "email address",
                        "Seat type"});
            table8.AddRow(new string[] {
                        "6789-1",
                        "William@Weber.com",
                        "General admission"});
            table8.AddRow(new string[] {
                        "6789-2",
                        "Oliver@Weber.com",
                        "CQRS Workshop"});
            table8.AddRow(new string[] {
                        "6789-3",
                        "Tim@Martin.com",
                        "CQRS Workshop"});
            table8.AddRow(new string[] {
                        "6789-4",
                        "Mani@Kris.com",
                        "Additional cocktail party"});
#line 65
testRunner.And("the Attendees should get an email informing about the conference and the Seat Typ" +
                    "e with Seat Access Code", ((string)(null)), table8);
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RegistrantWorkflowForPartiallyAssigningSomeOfTheRegisteredOrderItemsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RegistrantWorkflowForPartiallyAssigningSomeOfTheRegisteredOrderItemsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
