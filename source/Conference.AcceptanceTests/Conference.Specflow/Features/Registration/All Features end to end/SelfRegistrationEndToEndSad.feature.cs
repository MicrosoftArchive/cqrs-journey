// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Conference.Specflow.Features.Registration.AllFeaturesEndToEnd
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature : Xunit.IUseFixture<SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SelfRegistrationEndToEndSad.feature"
#line hidden
        
        public SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Self Registrant end to end scenario for making a Registration for a Conference (s" +
                    "ad path)", "In order to register for a conference\r\nAs an Attendee\r\nI want to be able to regis" +
                    "ter for the conference, pay for the Registration Order and associate myself with" +
                    " the paid Order automatically", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "rate"});
            table1.AddRow(new string[] {
                        "General admission",
                        "$199"});
            table1.AddRow(new string[] {
                        "Pre-con Workshop with Greg Young",
                        "$500"});
            table1.AddRow(new string[] {
                        "Additional cocktail party",
                        "$50"});
#line 7
 testRunner.Given("the list of the available Order Items for the CQRS summit 2012 conference", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table2.AddRow(new string[] {
                        "General admission",
                        "1"});
            table2.AddRow(new string[] {
                        "Pre-con Workshop with Greg Young",
                        "1"});
            table2.AddRow(new string[] {
                        "Additional cocktail party",
                        "1"});
#line 12
 testRunner.And("the selected Order Items", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Promotional Code",
                        "Discount",
                        "Quota",
                        "Scope",
                        "Cumulative"});
            table3.AddRow(new string[] {
                        "COPRESENTER",
                        "10%",
                        "Unlimited",
                        "Additional cocktail party",
                        "Exclusive"});
#line 17
 testRunner.And("the Promotional Codes", ((string)(null)), table3);
#line hidden
        }
        
        public virtual void SetFixture(SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "Partial Promotional Code for none of the selected items")]
        public virtual void PartialPromotionalCodeForNoneOfTheSelectedItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partial Promotional Code for none of the selected items", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table4.AddRow(new string[] {
                        "Pre-con Workshop with Greg Young",
                        "1"});
#line 23
 testRunner.Given("the selected Order Items", ((string)(null)), table4);
#line 26
 testRunner.And("the total amount should be of $500");
#line 27
 testRunner.When("the Registrant apply the \'VOLUNTEER\' Promotional Code");
#line 28
 testRunner.Then("the \'VOLUNTEER\' Coupon will not be applied and an error message will inform about" +
                    " the problem");
#line 29
 testRunner.And("the total amount should be of $500");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "All Seat Types are available, one get reserved and two get waitlisted")]
        public virtual void AllSeatTypesAreAvailableOneGetReservedAndTwoGetWaitlisted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All Seat Types are available, one get reserved and two get waitlisted", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type"});
            table5.AddRow(new string[] {
                        "Pre-con Workshop with Greg Young"});
            table5.AddRow(new string[] {
                        "Additional cocktail party"});
#line 35
 testRunner.Given("these Seat Types becomes unavailable before the Registrant make the reservation", ((string)(null)), table5);
#line 39
 testRunner.When("the Registrant proceed to make the Reservation");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table6.AddRow(new string[] {
                        "Pre-con Workshop with Greg Young",
                        "1"});
            table6.AddRow(new string[] {
                        "Additional cocktail party",
                        "1"});
#line 40
 testRunner.Then("the Registrant is offered to be waitlisted for these Order Items", ((string)(null)), table6);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table7.AddRow(new string[] {
                        "General admission",
                        "1"});
#line 44
 testRunner.And("These other Order Items get reserved", ((string)(null)), table7);
#line 47
 testRunner.And("the countdown will start for the reserved Order Item");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "1 order item is available, 2 are waitlisted, 1 available and 1 waitlisted are sel" +
            "ected, then 1 get reserved and 1 get waitlisted")]
        public virtual void _1OrderItemIsAvailable2AreWaitlisted1AvailableAnd1WaitlistedAreSelectedThen1GetReservedAnd1GetWaitlisted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 order item is available, 2 are waitlisted, 1 available and 1 waitlisted are sel" +
                    "ected, then 1 get reserved and 1 get waitlisted", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table8.AddRow(new string[] {
                        "General admission",
                        "1"});
#line 53
 testRunner.Given("the list of available Order Items selected by the Registrant", ((string)(null)), table8);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table9.AddRow(new string[] {
                        "Pre-con Workshop with Greg Young",
                        "1"});
            table9.AddRow(new string[] {
                        "Additional cocktail party",
                        "0"});
#line 56
 testRunner.And("the list of these Order Items offered to be waitlisted and selected by the Regist" +
                    "rant", ((string)(null)), table9);
#line 60
 testRunner.When("the Registrant proceed to make the Reservation");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table10.AddRow(new string[] {
                        "Pre-con Workshop with Greg Young",
                        "1"});
#line 61
 testRunner.Then("these order itmes get confirmed being waitlisted", ((string)(null)), table10);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table11.AddRow(new string[] {
                        "General admission",
                        "1"});
#line 64
 testRunner.And("these other order items get reserved", ((string)(null)), table11);
#line 67
 testRunner.And("the countdown has decreased within the allowed timeslot for holding the Reservati" +
                    "on");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "Checkout:Registrant Invalid Details")]
        public virtual void CheckoutRegistrantInvalidDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout:Registrant Invalid Details", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address"});
            table12.AddRow(new string[] {
                        "John",
                        "Smith",
                        "johnsmith@invalid"});
#line 71
 testRunner.Given("the Registrant enter these details", ((string)(null)), table12);
#line 74
 testRunner.And("the email address is not valid");
#line 76
 testRunner.When("the Registrant proceed to select a payment option");
#line 77
 testRunner.Then("the invalid field is highlighted with a hint of the error cause");
#line 78
 testRunner.And("the countdown has decreased within the allowed timeslot for holding the Reservati" +
                    "on");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "Checkout:Payment with cancellation")]
        public virtual void CheckoutPaymentWithCancellation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout:Payment with cancellation", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address"});
            table13.AddRow(new string[] {
                        "John",
                        "Smith",
                        "johnsmith@contoso.com"});
#line 82
 testRunner.Given("the Registrant enter these details", ((string)(null)), table13);
#line 85
 testRunner.And("the countdown has decreased within the allowed timeslot for holding the Reservati" +
                    "on");
#line 86
 testRunner.And("the Registrant select one of the offered payment options");
#line 87
 testRunner.When("the Registrant decides to cancel the payment");
#line 88
    testRunner.Then("a cancelation message will be shown to the Registrant and will get back to the pa" +
                    "yment options");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "Checkout:Payment and place Order")]
        public virtual void CheckoutPaymentAndPlaceOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout:Payment and place Order", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address"});
            table14.AddRow(new string[] {
                        "John",
                        "Smith",
                        "johnsmith@contoso.com"});
#line 92
 testRunner.Given("the Registrant enter these details", ((string)(null)), table14);
#line 95
 testRunner.And("the countdown has decreased within the allowed timeslot for holding the Reservati" +
                    "on");
#line 96
 testRunner.And("the Registrant select one of the offered payment options");
#line 97
 testRunner.When("the Registrant proceed to confirm the payment");
#line 98
    testRunner.Then("a receipt will be received from the payment provider indicating success with some" +
                    " transaction id");
#line 99
 testRunner.And("a Registration confirmation with the Access code should be displayed");
#line 100
 testRunner.And("an email with the Access Code will be send to the registered email.");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "Partiall Seats allocation")]
        public virtual void PartiallSeatsAllocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partiall Seats allocation", ((string[])(null)));
#line 103
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 104
testRunner.Given("the ConfirmSuccessfulRegistration for the selected Order Items");
#line 105
testRunner.And("the Order Access code is 6789");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address",
                        "Seat type"});
            table15.AddRow(new string[] {
                        "John",
                        "Smith",
                        "johnsmith@contoso.com",
                        "General admission"});
#line 106
testRunner.And("I assign the purchased seats to attendees as following", ((string)(null)), table15);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address",
                        "Seat type"});
            table16.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "Additional cocktail party"});
#line 109
testRunner.And("leave unassigned these seats", ((string)(null)), table16);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address",
                        "Seat type"});
            table17.AddRow(new string[] {
                        "John",
                        "Smith",
                        "johnsmith@contoso.com",
                        "General admission"});
#line 112
testRunner.Then("I should be getting a seat assignment confirmation for the seats", ((string)(null)), table17);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Access code",
                        "email address",
                        "Seat type"});
            table18.AddRow(new string[] {
                        "6789-1",
                        "johnsmith@contoso.com",
                        "General admission"});
#line 115
testRunner.And("the Attendees should get an email informing about the conference and the Seat Typ" +
                    "e with Seat Access Code", ((string)(null)), table18);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "Complete Seats allocation")]
        public virtual void CompleteSeatsAllocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete Seats allocation", ((string[])(null)));
#line 120
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 121
testRunner.Given("the ConfirmSuccessfulRegistration for the selected Order Items");
#line 122
testRunner.And("the Order Access code is 6789");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "First name",
                        "Last name",
                        "email address",
                        "Seat type"});
            table19.AddRow(new string[] {
                        "John",
                        "Smith",
                        "johnsmith@contoso.com",
                        "Additional cocktail party"});
#line 123
testRunner.And("the Registrant assign the purchased seats to attendees as following", ((string)(null)), table19);
#line 126
testRunner.Then("the Registrant should be get a Seat Assignment confirmation");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Access code",
                        "email address",
                        "Seat type"});
            table20.AddRow(new string[] {
                        "6789-2",
                        "johnsmith@contoso.com",
                        "Additional cocktail party"});
#line 127
testRunner.And("the Attendees should get an email informing about the conference and the Seat Typ" +
                    "e with Seat Access Code", ((string)(null)), table20);
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
